--------------------------------------------------------------------
------------------------------SPRINT 1------------------------------
--------------------------------------------------------------------
DROP SEQUENCE SEQ_ANALISE_DA_CONSULTA;
DROP SEQUENCE SEQ_REPRESENTANTE;
DROP SEQUENCE SEQ_CONSULTA;
DROP SEQUENCE SEQ_TELEFONE_EMPRESA;
DROP SEQUENCE SEQ_ENDERECO_EMPRESA;
DROP SEQUENCE SEQ_LOGIN;
DROP SEQUENCE SEQ_EMAIL_CONTATO;
DROP SEQUENCE SEQ_CADASTRO;
--------------------------------------------------------------------
DROP TABLE T_TC_ANALISE_DA_CONSULTA CASCADE CONSTRAINTS;
DROP TABLE T_TC_REPRESENTANTE CASCADE CONSTRAINTS;
DROP TABLE T_TC_CONSULTA CASCADE CONSTRAINTS;
DROP TABLE T_TC_TELEFONE_EMPRESA CASCADE CONSTRAINTS;
DROP TABLE T_TC_ENDERECO_EMPRESA CASCADE CONSTRAINTS;
DROP TABLE T_TC_LOGIN CASCADE CONSTRAINTS;
DROP TABLE T_TC_EMAIL_CONTATO CASCADE CONSTRAINTS;
DROP TABLE T_TC_CADASTRO CASCADE CONSTRAINTS;
--------------------------------------------------------------------
CREATE TABLE T_TC_CADASTRO(
  id_cadastro NUMERIC NOT NULL,
  nr_cnpj NUMERIC(14) NOT NULL,
  varchar_senha VARCHAR(60) NOT NULL,
  nm_razaosocial VARCHAR(80) NOT NULL,
  CONSTRAINT T_TC_CADASTRO_PK PRIMARY KEY (id_cadastro)
);

CREATE SEQUENCE SEQ_CADASTRO
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------
CREATE TABLE T_TC_EMAIL_CONTATO(
  id_email_contato NUMERIC NOT NULL,
  varchar_email VARCHAR(80),
  id_cadastro NUMERIC NOT NULL,
  CONSTRAINT T_TC_EMAIL_CONTATO_PK PRIMARY KEY (id_email_contato),
  CONSTRAINT T_TC_CADASTRO_EMAIL_CONTATO_FK FOREIGN KEY (id_cadastro) REFERENCES T_TC_CADASTRO(id_cadastro)
);

CREATE SEQUENCE SEQ_EMAIL_CONTATO
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------
CREATE TABLE T_TC_LOGIN(
  id_login NUMERIC NOT NULL,
  nr_cnpj NUMERIC NOT NULL,
  varchar_senha NUMERIC NOT NULL,
  id_cadastro NUMERIC NOT NULL,
  CONSTRAINT T_TC_LOGIN_PK PRIMARY KEY (id_login),
  CONSTRAINT T_TC_CADASTRO_LOGIN_FK FOREIGN KEY (id_cadastro) REFERENCES T_TC_CADASTRO(id_cadastro)
);

CREATE SEQUENCE SEQ_LOGIN
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
-------------------------------------------------------------------
CREATE TABLE T_TC_ENDERECO_EMPRESA(
  id_endereco NUMERIC NOT NULL,
  nr_logradouro NUMERIC NOT NULL,
  cep NUMERIC NOT NULL,
  ds_ponto_de_referencia VARCHAR(100) NOT NULL,
  id_cadastro NUMERIC NOT NULL,
  CONSTRAINT T_TC_ENDERECO_EMPRESA_PK PRIMARY KEY (id_endereco),
  CONSTRAINT T_TC_CADASTRO_ENDERECO_EMPRESA_FK FOREIGN KEY (id_cadastro) REFERENCES T_TC_CADASTRO(id_cadastro)
);

CREATE SEQUENCE SEQ_ENDERECO_EMPRESA
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------
CREATE TABLE T_TC_TELEFONE_EMPRESA(
  id_telefone NUMERIC NOT NULL,
  nr_ddi NUMERIC NOT NULL,
  nr_ddd NUMERIC NOT NULL,
  nr_telefone NUMERIC NOT NULL,
  tp_telefone VARCHAR(20) NOT NULL,
  id_cadastro NUMERIC NOT NULL,
  CONSTRAINT T_TC_TELEFONE_EMPRESA_PK PRIMARY KEY (id_telefone),
  CONSTRAINT T_TC_CADASTRO_TELEFONE_EMPRESA_FK FOREIGN KEY (id_cadastro) REFERENCES T_TC_CADASTRO(id_cadastro)
);

CREATE SEQUENCE SEQ_TELEFONE_EMPRESA
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------
CREATE TABLE T_TC_CONSULTA(
  id_consulta NUMERIC NOT NULL,
  ds_consulta VARCHAR(80) NOT NULL,
  dt_consulta DATE NOT NULL,
  blob_csv_arquivo BLOB NOT NULL,
  id_cadastro NUMERIC NOT NULL,
  CONSTRAINT T_TC_CONSULTA_PK PRIMARY KEY (id_consulta),
  CONSTRAINT T_TC_CADASTRO_CONSULTA_FK FOREIGN KEY (id_cadastro) REFERENCES T_TC_CADASTRO(id_cadastro)
);

CREATE SEQUENCE SEQ_CONSULTA
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------
CREATE TABLE T_TC_REPRESENTANTE(
  id_representante NUMERIC NOT NULL,
  nm_representante VARCHAR(80) NOT NULL,
  id_consulta NUMERIC NOT NULL,
  CONSTRAINT T_TC_REPRESENTANTE_PK PRIMARY KEY (id_representante),
  CONSTRAINT T_TC_CONSULTA_REPRESENTANTE_FK FOREIGN KEY (id_consulta) REFERENCES T_TC_CONSULTA(id_consulta)
);

CREATE SEQUENCE SEQ_REPRESENTANTE
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------
CREATE TABLE T_TC_ANALISE_DA_CONSULTA(
  id_analise_da_consulta NUMERIC NOT NULL,
  pdf_analise_da_consulta BLOB NOT NULL,
  st_analise_da_consulta char(1) check(st_analise_da_consulta in ('i', 'a')),
  id_consulta NUMERIC NOT NULL,
  CONSTRAINT T_TC_ANALISE_DA_CONSULTA_PK PRIMARY KEY (id_analise_da_consulta),
  CONSTRAINT T_TC_CONSULTA_ANALISE_DA_CONSULTA_FK FOREIGN KEY (id_consulta) REFERENCES T_TC_CONSULTA(id_consulta)
);

CREATE SEQUENCE SEQ_ANALISE_DA_CONSULTA
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;
--------------------------------------------------------------------

INSERT INTO T_TC_CADASTRO (id_cadastro, nr_cnpj, varchar_senha, nm_razaosocial) VALUES (SEQ_CADASTRO.NEXTVAL, 12345678901234, 'senha123', 'Empresa A');
INSERT INTO T_TC_CADASTRO (id_cadastro, nr_cnpj, varchar_senha, nm_razaosocial) VALUES (SEQ_CADASTRO.NEXTVAL, 23456789012345, 'senha234', 'Empresa B');
INSERT INTO T_TC_CADASTRO (id_cadastro, nr_cnpj, varchar_senha, nm_razaosocial) VALUES (SEQ_CADASTRO.NEXTVAL, 34567890123456, 'senha345', 'Empresa C');
INSERT INTO T_TC_CADASTRO (id_cadastro, nr_cnpj, varchar_senha, nm_razaosocial) VALUES (SEQ_CADASTRO.NEXTVAL, 45678901234567, 'senha456', 'Empresa D');
INSERT INTO T_TC_CADASTRO (id_cadastro, nr_cnpj, varchar_senha, nm_razaosocial) VALUES (SEQ_CADASTRO.NEXTVAL, 56789012345678, 'senha567', 'Empresa E');

--------------------------------------------------------------------

INSERT INTO T_TC_EMAIL_CONTATO (id_email_contato, varchar_email, id_cadastro) VALUES (SEQ_EMAIL_CONTATO.NEXTVAL, 'email@empresaA.com', 1);
INSERT INTO T_TC_EMAIL_CONTATO (id_email_contato, varchar_email, id_cadastro) VALUES (SEQ_EMAIL_CONTATO.NEXTVAL, 'email@empresaB.com', 2);
INSERT INTO T_TC_EMAIL_CONTATO (id_email_contato, varchar_email, id_cadastro) VALUES (SEQ_EMAIL_CONTATO.NEXTVAL, 'email@empresaC.com', 3);
INSERT INTO T_TC_EMAIL_CONTATO (id_email_contato, varchar_email, id_cadastro) VALUES (SEQ_EMAIL_CONTATO.NEXTVAL, 'email@empresaD.com', 4);
INSERT INTO T_TC_EMAIL_CONTATO (id_email_contato, varchar_email, id_cadastro) VALUES (SEQ_EMAIL_CONTATO.NEXTVAL, 'email@empresaE.com', 5);

--------------------------------------------------------------------

INSERT INTO T_TC_LOGIN (id_login, nr_cnpj, varchar_senha, id_cadastro) VALUES (SEQ_LOGIN.NEXTVAL, 12345678901234, 123, 1);
INSERT INTO T_TC_LOGIN (id_login, nr_cnpj, varchar_senha, id_cadastro) VALUES (SEQ_LOGIN.NEXTVAL, 23456789012345, 234, 2);
INSERT INTO T_TC_LOGIN (id_login, nr_cnpj, varchar_senha, id_cadastro) VALUES (SEQ_LOGIN.NEXTVAL, 34567890123456, 345, 3);
INSERT INTO T_TC_LOGIN (id_login, nr_cnpj, varchar_senha, id_cadastro) VALUES (SEQ_LOGIN.NEXTVAL, 45678901234567, 456, 4);
INSERT INTO T_TC_LOGIN (id_login, nr_cnpj, varchar_senha, id_cadastro) VALUES (SEQ_LOGIN.NEXTVAL, 56789012345678, 567, 5);

--------------------------------------------------------------------

INSERT INTO T_TC_ENDERECO_EMPRESA (id_endereco, nr_logradouro, cep, ds_ponto_de_referencia, id_cadastro) VALUES (SEQ_ENDERECO_EMPRESA.NEXTVAL, 123, 12345678, 'Próximo ao mercado central', 1);
INSERT INTO T_TC_ENDERECO_EMPRESA (id_endereco, nr_logradouro, cep, ds_ponto_de_referencia, id_cadastro) VALUES (SEQ_ENDERECO_EMPRESA.NEXTVAL, 234, 23456789, 'Ao lado da estação de trem',2);
INSERT INTO T_TC_ENDERECO_EMPRESA (id_endereco, nr_logradouro, cep, ds_ponto_de_referencia, id_cadastro) VALUES (SEQ_ENDERECO_EMPRESA.NEXTVAL, 345, 34567890, 'Atrás do shopping novo', 3);
INSERT INTO T_TC_ENDERECO_EMPRESA (id_endereco, nr_logradouro, cep, ds_ponto_de_referencia, id_cadastro) VALUES (SEQ_ENDERECO_EMPRESA.NEXTVAL, 456, 45678901, 'Em frente ao parque da cidade', 4);
INSERT INTO T_TC_ENDERECO_EMPRESA (id_endereco, nr_logradouro, cep, ds_ponto_de_referencia, id_cadastro) VALUES (SEQ_ENDERECO_EMPRESA.NEXTVAL, 567, 56789012, 'Lado sul da universidade', 5);

--------------------------------------------------------------------

INSERT INTO T_TC_TELEFONE_EMPRESA (id_telefone, nr_ddi, nr_ddd, nr_telefone, tp_telefone, id_cadastro) VALUES (SEQ_TELEFONE_EMPRESA.NEXTVAL, 55, 11, 12345678, 'Fixo', 1);
INSERT INTO T_TC_TELEFONE_EMPRESA (id_telefone, nr_ddi, nr_ddd, nr_telefone, tp_telefone, id_cadastro) VALUES (SEQ_TELEFONE_EMPRESA.NEXTVAL, 55, 21, 23456789, 'Fixo', 2);
INSERT INTO T_TC_TELEFONE_EMPRESA (id_telefone, nr_ddi, nr_ddd, nr_telefone, tp_telefone, id_cadastro) VALUES (SEQ_TELEFONE_EMPRESA.NEXTVAL, 55, 31, 34567890, 'Móvel', 3);
INSERT INTO T_TC_TELEFONE_EMPRESA (id_telefone, nr_ddi, nr_ddd, nr_telefone, tp_telefone, id_cadastro) VALUES (SEQ_TELEFONE_EMPRESA.NEXTVAL, 55, 41, 45678901, 'Móvel', 4);
INSERT INTO T_TC_TELEFONE_EMPRESA (id_telefone, nr_ddi, nr_ddd, nr_telefone, tp_telefone, id_cadastro) VALUES (SEQ_TELEFONE_EMPRESA.NEXTVAL, 55, 51, 56789012, 'Fax', 5);

--------------------------------------------------------------------

INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) VALUES (SEQ_CONSULTA.NEXTVAL, 'Consulta sobre impostos', '29/10/02', HEXTORAW('48656C6C6F'), 1);
INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) VALUES (SEQ_CONSULTA.NEXTVAL, 'Consulta sobre exportação', '29/10/02', HEXTORAW('48656C6C6F'), 2);
INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) VALUES (SEQ_CONSULTA.NEXTVAL, 'Consulta sobre importação', '29/10/02', HEXTORAW('48656C6C6F'), 3);
INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) VALUES (SEQ_CONSULTA.NEXTVAL, 'Consulta sobre regulamentação', '29/10/02', HEXTORAW('48656C6C6F'), 4);
INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) VALUES (SEQ_CONSULTA.NEXTVAL, 'Consulta sobre inovação', '29/10/02', HEXTORAW('48656C6C6F'), 5);

--------------------------------------------------------------------

INSERT INTO T_TC_REPRESENTANTE (id_representante, nm_representante, id_consulta) VALUES (SEQ_REPRESENTANTE.NEXTVAL, 'Representante A', 1);
INSERT INTO T_TC_REPRESENTANTE (id_representante, nm_representante, id_consulta) VALUES (SEQ_REPRESENTANTE.NEXTVAL, 'Representante B', 2);
INSERT INTO T_TC_REPRESENTANTE (id_representante, nm_representante, id_consulta) VALUES (SEQ_REPRESENTANTE.NEXTVAL, 'Representante C', 3);
INSERT INTO T_TC_REPRESENTANTE (id_representante, nm_representante, id_consulta) VALUES (SEQ_REPRESENTANTE.NEXTVAL, 'Representante D', 4);
INSERT INTO T_TC_REPRESENTANTE (id_representante, nm_representante, id_consulta) VALUES (SEQ_REPRESENTANTE.NEXTVAL, 'Representante E', 5);

--------------------------------------------------------------------

INSERT INTO T_TC_ANALISE_DA_CONSULTA (id_analise_da_consulta, pdf_analise_da_consulta, st_analise_da_consulta, id_consulta)VALUES (1, HEXTORAW('48656C6C6F'), 'i', 1);
INSERT INTO T_TC_ANALISE_DA_CONSULTA (id_analise_da_consulta, pdf_analise_da_consulta, st_analise_da_consulta, id_consulta)VALUES (2, HEXTORAW('48656C6C6F'), 'a', 2);
INSERT INTO T_TC_ANALISE_DA_CONSULTA (id_analise_da_consulta, pdf_analise_da_consulta, st_analise_da_consulta, id_consulta)VALUES (3, HEXTORAW('48656C6C6F'), 'i', 3);
INSERT INTO T_TC_ANALISE_DA_CONSULTA (id_analise_da_consulta, pdf_analise_da_consulta, st_analise_da_consulta, id_consulta)VALUES (4, HEXTORAW('48656C6C6F'), 'a', 4);
INSERT INTO T_TC_ANALISE_DA_CONSULTA (id_analise_da_consulta, pdf_analise_da_consulta, st_analise_da_consulta, id_consulta)VALUES (5, HEXTORAW('48656C6C6F'), 'i', 5);

--------------------------------------------------------------------
select * from t_tc_analise_da_consulta;
select * from t_tc_cadastro;
select * from t_tc_consulta;
select * from t_tc_email_contato;
select * from t_tc_endereco_empresa;
select * from t_tc_login;
select * from t_tc_representante;
select * from t_tc_telefone_empresa;
--------------------------------------------------------------------
set serveroutput on
SET VERIFY OFF

BEGIN
    FOR r IN (
        SELECT cad.nm_razaosocial, COUNT(e.id_email_contato) AS num_emails
        FROM T_TC_CADASTRO cad
        JOIN T_TC_EMAIL_CONTATO e ON cad.id_cadastro = e.id_cadastro
        GROUP BY cad.nm_razaosocial
        ORDER BY cad.nm_razaosocial ASC
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(r.nm_razaosocial || ': ' || r.num_emails);
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('----------');
    
    FOR r IN (
        SELECT cad.nm_razaosocial, COUNT(cons.id_consulta) AS num_consultas
        FROM T_TC_CADASTRO cad
        JOIN T_TC_CONSULTA cons ON cad.id_cadastro = cons.id_cadastro
        GROUP BY cad.nm_razaosocial
        ORDER BY num_consultas DESC
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(r.nm_razaosocial || ': ' || r.num_consultas);
    END LOOP;
END;
--------------------------------------------------------------------
BEGIN
    FOR r IN (
        SELECT e.cep, COUNT(cad.id_cadastro) AS num_empresas
        FROM T_TC_CADASTRO cad
        JOIN T_TC_ENDERECO_EMPRESA e ON cad.id_cadastro = e.id_cadastro
        GROUP BY e.cep
        ORDER BY num_empresas DESC
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('CEP: ' || r.cep || ' - Empresas: ' || r.num_empresas);
    END LOOP;
    
END;

--------------------------------------------------------------------
------------------------------SPRINT 2------------------------------
--------------------------------------------------------------------

------------------------------FUNCTIONS-----------------------------
set serveroutput on
SET VERIFY OFF

CREATE OR REPLACE FUNCTION valida_telefone(nr_ddi IN NUMERIC, nr_ddd IN NUMERIC, nr_telefone IN NUMERIC) RETURN BOOLEAN IS
BEGIN
  IF nr_ddi != 55 THEN 
    RETURN FALSE;
  END IF;

  IF LENGTH(nr_ddd) != 2 THEN
    RETURN FALSE;
  END IF;

  IF LENGTH(nr_telefone) != 8 AND LENGTH(nr_telefone) != 9 THEN
    RETURN FALSE;
  END IF;

  RETURN TRUE;
END;
---

DECLARE
  resultado BOOLEAN;
BEGIN
resultado := valida_telefone(55, 11, 98765432);  
  IF resultado = TRUE THEN
    DBMS_OUTPUT.PUT_LINE('O telefone é válido.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('O telefone é inválido.');
  END IF;   
END;

------

CREATE OR REPLACE FUNCTION verifica_tamanho_senha(senha IN VARCHAR2) RETURN BOOLEAN IS
BEGIN
  IF LENGTH(senha) <= 60 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE; 
  END IF;
END;

---

DECLARE
  resultado BOOLEAN;
BEGIN
  resultado := verifica_tamanho_senha('Senha123');
  
  IF resultado THEN
    DBMS_OUTPUT.PUT_LINE('A senha está dentro do limite de tamanho.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('A senha excede o limite de tamanho.');
  END IF;
END;

---------------------------------------------------------------------
----------------PROCEDURES - INSERT/UPDATE E DELETE------------------

---CADASTRO
CREATE OR REPLACE PROCEDURE SP_INSERT_CADASTRO(
    P_NR_CNPJ NUMERIC, 
    P_SENHA VARCHAR, 
    P_RAZAOSOCIAL VARCHAR 
) AS 
BEGIN 
    INSERT INTO T_TC_CADASTRO (id_cadastro, nr_cnpj, varchar_senha, nm_razaosocial) 
    VALUES (SEQ_CADASTRO.NEXTVAL, P_NR_CNPJ, P_SENHA, P_RAZAOSOCIAL); 
END;
---
EXEC SP_INSERT_CADASTRO(67890123456789, 'senha678', 'Empresa F');
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_CADASTRO(
    P_ID_CADASTRO NUMERIC, 
    P_NR_CNPJ NUMERIC, 
    P_SENHA VARCHAR, 
    P_RAZAOSOCIAL VARCHAR 
) AS 
BEGIN 
    UPDATE T_TC_CADASTRO 
    SET nr_cnpj = P_NR_CNPJ, varchar_senha = P_SENHA, nm_razaosocial = P_RAZAOSOCIAL 
    WHERE id_cadastro = P_ID_CADASTRO; 
END;

---
EXEC SP_UPDATE_CADASTRO(6, 67890123456789, 'nova_senha678', 'Empresa F Atualizada');
---

---EMAIL_CONTATO
CREATE OR REPLACE PROCEDURE SP_INSERT_EMAIL_CONTATO(
    P_EMAIL VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_EMAIL_CONTATO (id_email_contato, varchar_email, id_cadastro) 
    VALUES (SEQ_EMAIL_CONTATO.NEXTVAL, P_EMAIL, P_ID_CADASTRO); 
END;
---
EXEC SP_INSERT_EMAIL_CONTATO('email@empresaF.com', 6);
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_EMAIL_CONTATO(
    P_ID_EMAIL_CONTATO NUMERIC, 
    P_EMAIL VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_EMAIL_CONTATO 
    SET varchar_email = P_EMAIL, id_cadastro = P_ID_CADASTRO 
    WHERE id_email_contato = P_ID_EMAIL_CONTATO; 
END;
---
EXEC SP_UPDATE_EMAIL_CONTATO(6, 'novo_email@empresaF.com', 6);
---

---LOGIN
CREATE OR REPLACE PROCEDURE SP_INSERT_LOGIN(
    P_NR_CNPJ NUMERIC, 
    P_SENHA VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_LOGIN (id_login, nr_cnpj, varchar_senha, id_cadastro) 
    VALUES (SEQ_LOGIN.NEXTVAL, P_NR_CNPJ, P_SENHA, P_ID_CADASTRO); 
END;

---
EXEC SP_INSERT_LOGIN(67890123456789, 678, 6);

DESC T_TC_LOGIN;
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_LOGIN(
    P_ID_LOGIN NUMERIC, 
    P_NR_CNPJ NUMERIC, 
    P_SENHA VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_LOGIN 
    SET nr_cnpj = P_NR_CNPJ, varchar_senha = P_SENHA, id_cadastro = P_ID_CADASTRO 
    WHERE id_login = P_ID_LOGIN; 
END;

---
EXEC SP_UPDATE_LOGIN(6, 67890123456789, 679 , 6);
---

---ENDERECO_EMPRESA
CREATE OR REPLACE PROCEDURE SP_INSERT_ENDERECO_EMPRESA(
    P_NR_LOGRADOURO NUMERIC, 
    P_CEP NUMERIC, 
    P_DS_PONTO_REFERENCIA VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_ENDERECO_EMPRESA (id_endereco, nr_logradouro, cep, ds_ponto_de_referencia, id_cadastro) 
    VALUES (SEQ_ENDERECO_EMPRESA.NEXTVAL, P_NR_LOGRADOURO, P_CEP, P_DS_PONTO_REFERENCIA, P_ID_CADASTRO); 
END;

---
EXEC SP_INSERT_ENDERECO_EMPRESA(678, 67890123, 'Próximo ao parque central', 6);
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_ENDERECO_EMPRESA(
    P_ID_ENDERECO NUMERIC, 
    P_NR_LOGRADOURO NUMERIC, 
    P_CEP NUMERIC, 
    P_DS_PONTO_REFERENCIA VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_ENDERECO_EMPRESA 
    SET nr_logradouro = P_NR_LOGRADOURO, cep = P_CEP, ds_ponto_de_referencia = P_DS_PONTO_REFERENCIA, id_cadastro = P_ID_CADASTRO 
    WHERE id_endereco = P_ID_ENDERECO; 
END;

---
EXEC SP_UPDATE_ENDERECO_EMPRESA(6, 678, 67890123, 'Novo ponto de referência', 6);
---

---TELEFONE_EMPRESA
CREATE OR REPLACE PROCEDURE SP_INSERT_TELEFONE_EMPRESA(
    P_NR_DDI NUMERIC, 
    P_NR_DDD NUMERIC, 
    P_NR_TELEFONE NUMERIC, 
    P_TP_TELEFONE VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_TELEFONE_EMPRESA (id_telefone, nr_ddi, nr_ddd, nr_telefone, tp_telefone, id_cadastro) 
    VALUES (SEQ_TELEFONE_EMPRESA.NEXTVAL, P_NR_DDI, P_NR_DDD, P_NR_TELEFONE, P_TP_TELEFONE, P_ID_CADASTRO); 
END;

---
EXEC SP_INSERT_TELEFONE_EMPRESA(55, 61, 67890123, 'Fixo', 6);
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_TELEFONE_EMPRESA(
    P_ID_TELEFONE NUMERIC, 
    P_NR_DDI NUMERIC, 
    P_NR_DDD NUMERIC, 
    P_NR_TELEFONE NUMERIC, 
    P_TP_TELEFONE VARCHAR, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_TELEFONE_EMPRESA 
    SET nr_ddi = P_NR_DDI, nr_ddd = P_NR_DDD, nr_telefone = P_NR_TELEFONE, tp_telefone = P_TP_TELEFONE, id_cadastro = P_ID_CADASTRO 
    WHERE id_telefone = P_ID_TELEFONE; 
END;

---
EXEC SP_UPDATE_TELEFONE_EMPRESA(6, 55, 61, 78901234, 'Móvel', 6);
---

---CONSULTA
CREATE OR REPLACE PROCEDURE SP_INSERT_CONSULTA(
    P_DS_CONSULTA VARCHAR, 
    P_DT_CONSULTA DATE, 
    P_BLOB_CSV_ARQUIVO BLOB, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) 
    VALUES (SEQ_CONSULTA.NEXTVAL, P_DS_CONSULTA, P_DT_CONSULTA, P_BLOB_CSV_ARQUIVO, P_ID_CADASTRO); 
END;

---
EXEC SP_INSERT_CONSULTA('Consulta sobre novos impostos', TO_DATE('30/10/22', 'DD/MM/YY'), HEXTORAW('48656C6C6F'), 6);
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_CONSULTA(
    P_ID_CONSULTA NUMERIC, 
    P_DS_CONSULTA VARCHAR, 
    P_DT_CONSULTA DATE, 
    P_BLOB_CSV_ARQUIVO BLOB, 
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_CONSULTA 
    SET ds_consulta = P_DS_CONSULTA, dt_consulta = P_DT_CONSULTA, blob_csv_arquivo = P_BLOB_CSV_ARQUIVO, id_cadastro = P_ID_CADASTRO 
    WHERE id_consulta = P_ID_CONSULTA; 
END;

---
EXEC SP_UPDATE_CONSULTA(6, 'Atualização sobre novos impostos', TO_DATE('31/10/22', 'DD/MM/YY'), HEXTORAW('48656C6C6F'), 6);
---

---REPRESENTANTE
CREATE OR REPLACE PROCEDURE SP_INSERT_REPRESENTANTE(
    P_NM_REPRESENTANTE VARCHAR, 
    P_ID_CONSULTA NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_REPRESENTANTE (id_representante, nm_representante, id_consulta) 
    VALUES (SEQ_REPRESENTANTE.NEXTVAL, P_NM_REPRESENTANTE, P_ID_CONSULTA); 
END;

---
EXEC SP_INSERT_REPRESENTANTE('Representante F', 6);
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_REPRESENTANTE(
    P_ID_REPRESENTANTE NUMERIC, 
    P_NM_REPRESENTANTE VARCHAR, 
    P_ID_CONSULTA NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_REPRESENTANTE 
    SET nm_representante = P_NM_REPRESENTANTE, id_consulta = P_ID_CONSULTA 
    WHERE id_representante = P_ID_REPRESENTANTE; 
END;

---
EXEC SP_UPDATE_REPRESENTANTE(6, 'Novo Representante F', 6);
---

---ANALISE_DA_CONSULTA
CREATE OR REPLACE PROCEDURE SP_INSERT_ANALISE_DA_CONSULTA(
    P_PDF_ANALISE_DA_CONSULTA BLOB, 
    P_ST_ANALISE_DA_CONSULTA CHAR, 
    P_ID_CONSULTA NUMERIC 
) AS 
BEGIN 
    INSERT INTO T_TC_ANALISE_DA_CONSULTA (id_analise_da_consulta, pdf_analise_da_consulta, st_analise_da_consulta, id_consulta) 
    VALUES (SEQ_ANALISE_DA_CONSULTA.NEXTVAL, P_PDF_ANALISE_DA_CONSULTA, P_ST_ANALISE_DA_CONSULTA, P_ID_CONSULTA); 
END;

---
EXEC SP_INSERT_ANALISE_DA_CONSULTA(HEXTORAW('48656C6C6F'), 'i', 5);
---

CREATE OR REPLACE PROCEDURE SP_UPDATE_ANALISE_DA_CONSULTA(
    P_ID_ANALISE_DA_CONSULTA NUMERIC, 
    P_PDF_ANALISE_DA_CONSULTA BLOB, 
    P_ST_ANALISE_DA_CONSULTA CHAR, 
    P_ID_CONSULTA NUMERIC 
) AS 
BEGIN 
    UPDATE T_TC_ANALISE_DA_CONSULTA 
    SET pdf_analise_da_consulta = P_PDF_ANALISE_DA_CONSULTA, st_analise_da_consulta = P_ST_ANALISE_DA_CONSULTA, id_consulta = P_ID_CONSULTA 
    WHERE id_analise_da_consulta = P_ID_ANALISE_DA_CONSULTA; 
END;

---
EXEC SP_UPDATE_ANALISE_DA_CONSULTA(6, HEXTORAW('48656C6C6F'), 'a', 5);
---

---ANALISE_DA_CONSULTA
CREATE OR REPLACE PROCEDURE SP_DELETE_ANALISE_DA_CONSULTA(
    P_ID_ANALISE_DA_CONSULTA NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_ANALISE_DA_CONSULTA 
    WHERE id_analise_da_consulta = P_ID_ANALISE_DA_CONSULTA; 
END;

---
EXEC SP_DELETE_ANALISE_DA_CONSULTA(5);
---

---REPRESENTANTE
CREATE OR REPLACE PROCEDURE SP_DELETE_REPRESENTANTE(
    P_ID_REPRESENTANTE NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_REPRESENTANTE 
    WHERE id_representante = P_ID_REPRESENTANTE; 
END;

---
EXEC SP_DELETE_REPRESENTANTE(6);
---

---CONSULTA
CREATE OR REPLACE PROCEDURE SP_DELETE_CONSULTA(
    P_ID_CONSULTA NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_CONSULTA 
    WHERE id_consulta = P_ID_CONSULTA; 
END;

---
EXEC SP_DELETE_CONSULTA(6);
---

---TELEFONE_EMPRESA
CREATE OR REPLACE PROCEDURE SP_DELETE_TELEFONE_EMPRESA(
    P_ID_TELEFONE NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_TELEFONE_EMPRESA 
    WHERE id_telefone = P_ID_TELEFONE; 
END;
---
EXEC SP_DELETE_TELEFONE_EMPRESA(6);
---

---ENDERECO_EMPRESA
CREATE OR REPLACE PROCEDURE SP_DELETE_ENDERECO_EMPRESA(
    P_ID_ENDERECO NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_ENDERECO_EMPRESA 
    WHERE id_endereco = P_ID_ENDERECO; 
END;

---
EXEC SP_DELETE_ENDERECO_EMPRESA(6);
---

---LOGIN
CREATE OR REPLACE PROCEDURE SP_DELETE_LOGIN(
    P_ID_LOGIN NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_LOGIN 
    WHERE id_login = P_ID_LOGIN; 
END;

---
EXEC SP_DELETE_LOGIN(6);
---

---EMAIL_CONTATO
CREATE OR REPLACE PROCEDURE SP_DELETE_EMAIL_CONTATO(
    P_ID_EMAIL_CONTATO NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_EMAIL_CONTATO 
    WHERE id_email_contato = P_ID_EMAIL_CONTATO; 
END;

---
EXEC SP_DELETE_EMAIL_CONTATO(6);
---

---CADASTRO
CREATE OR REPLACE PROCEDURE SP_DELETE_CADASTRO(
    P_ID_CADASTRO NUMERIC 
) AS 
BEGIN 
    DELETE FROM T_TC_CADASTRO 
    WHERE id_cadastro = P_ID_CADASTRO; 
END;

---
EXEC SP_DELETE_CADASTRO(6);
---

SELECT * FROM T_TC_ANALISE_DA_CONSULTA;
SELECT * FROM T_TC_CADASTRO;
SELECT * FROM T_TC_CONSULTA;
SELECT * FROM T_TC_EMAIL_CONTATO;
SELECT * FROM T_TC_ENDERECO_EMPRESA;
SELECT * FROM T_TC_LOGIN;
SELECT * FROM T_TC_REPRESENTANTE;
SELECT * FROM T_TC_TELEFONE_EMPRESA;

---------------------------------------------------------------------
-------------------------PROCEDURES - JOIN---------------------------
SET SERVEROUTPUT ON;
SET VERIFY OFF;


CREATE OR REPLACE PROCEDURE SP_CONSULTAS_DETALHADAS AS
CURSOR CUR_CONSULTAS_DETALHADAS IS
    SELECT c.ds_consulta, c.dt_consulta, r.nm_representante, cad.nm_razaosocial
    FROM T_TC_CONSULTA c
    JOIN T_TC_REPRESENTANTE r ON c.id_consulta = r.id_consulta
    JOIN T_TC_CADASTRO cad ON c.id_cadastro = cad.id_cadastro;
BEGIN
    FOR REGISTRO IN CUR_CONSULTAS_DETALHADAS LOOP
        DBMS_OUTPUT.PUT_LINE('Consulta: ' || REGISTRO.ds_consulta || 
                             ', Data: ' || REGISTRO.dt_consulta || 
                             ', Representante: ' || REGISTRO.nm_representante || 
                             ', Empresa: ' || REGISTRO.nm_razaosocial);
    END LOOP;
END;

EXEC SP_CONSULTAS_DETALHADAS;

---------------------------------------------------------------------
------------PROCEDURES - JOIN/FUNCTION/ORDER BY/COUNT----------------
set serveroutput on
SET VERIFY OFF

CREATE OR REPLACE PROCEDURE RELATORIO_CONSULTAS_ANALISADAS AS
BEGIN
  DBMS_OUTPUT.PUT_LINE('Razão Social | Consultas Analisadas | Representantes');
  FOR r IN (
    SELECT 
      cad.nm_razaosocial AS razao_social,
      COUNT(cons.id_consulta) AS consultas_analisadas,
      LISTAGG(rep.nm_representante, ', ') WITHIN GROUP (ORDER BY rep.nm_representante) AS representantes
    FROM 
      T_TC_CADASTRO cad
      INNER JOIN T_TC_CONSULTA cons ON cad.id_cadastro = cons.id_cadastro
      INNER JOIN T_TC_REPRESENTANTE rep ON cons.id_consulta = rep.id_consulta
      INNER JOIN T_TC_ANALISE_DA_CONSULTA anal ON cons.id_consulta = anal.id_consulta
    WHERE 
      anal.st_analise_da_consulta = 'a'
    GROUP BY 
      cad.nm_razaosocial
    ORDER BY 
      cad.nm_razaosocial
  ) LOOP
    DBMS_OUTPUT.PUT_LINE(r.razao_social || ' | ' || r.consultas_analisadas || ' | ' || r.representantes);
  END LOOP;
END;

EXEC RELATORIO_CONSULTAS_ANALISADAS;

---------------------------------------------------------------------

--------------------------------------------------------------------
------------------------------SPRINT 3------------------------------
--------------------------------------------------------------------

------------------------------PROCEDURES(COM FUNÇÃO JSON)--------------------------------
set serveroutput on
SET VERIFY OFF

--- Função JSON 
CREATE OR REPLACE FUNCTION relacional_para_json(p_cursor SYS_REFCURSOR) RETURN CLOB IS
  l_json CLOB := '[';
  l_registro T_TC_CADASTRO%ROWTYPE;
  l_primeiro BOOLEAN := TRUE;
BEGIN
  LOOP
    FETCH p_cursor INTO l_registro;
    EXIT WHEN p_cursor%NOTFOUND;
    
    IF NOT l_primeiro THEN
      l_json := l_json || ',';
    ELSE
      l_primeiro := FALSE;
    END IF;
    
    l_json := l_json || '{' ||
              '"id_cadastro":' || l_registro.id_cadastro || ',' ||
              '"nr_cnpj":' || l_registro.nr_cnpj || ',' ||
              '"varchar_senha":"' || l_registro.varchar_senha || '",' ||
              '"nm_razaosocial":"' || l_registro.nm_razaosocial || '"}';
  END LOOP;
  
  l_json := l_json || ']';
  RETURN l_json;
END;
--- 

--- PROC DA FUNÇÃO JSON
CREATE OR REPLACE PROCEDURE proc_join_para_json IS
  l_cursor SYS_REFCURSOR;
  l_json CLOB;
  l_dummy T_TC_CADASTRO%ROWTYPE;
BEGIN
  OPEN l_cursor FOR
    SELECT c.id_cadastro, c.nr_cnpj, c.varchar_senha, c.nm_razaosocial
    FROM T_TC_CADASTRO c
    JOIN T_TC_EMAIL_CONTATO e ON c.id_cadastro = e.id_cadastro;

  FETCH l_cursor INTO l_dummy;
  IF l_cursor%NOTFOUND THEN
    RAISE NO_DATA_FOUND;
  END IF;

  l_json := relacional_para_json(l_cursor);
  DBMS_OUTPUT.PUT_LINE(l_json);

  CLOSE l_cursor;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Nenhum dado encontrado.');
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Muitos dados encontrados.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
END;

--- EXEC PROC
EXEC proc_join_para_json;
---

--- PROC TABELA ANTERIOR, ATUAL E PROXIMO
CREATE OR REPLACE PROCEDURE proc_anterior_atual_proximo IS
  CURSOR cursor_cadastro IS
    SELECT id_cadastro, nr_cnpj FROM T_TC_CADASTRO ORDER BY id_cadastro;
  
  nr_cnpj_atual T_TC_CADASTRO.nr_cnpj%TYPE;
  nr_cnpj_anterior T_TC_CADASTRO.nr_cnpj%TYPE;
  nr_cnpj_proximo T_TC_CADASTRO.nr_cnpj%TYPE;
  id_atual T_TC_CADASTRO.id_cadastro%TYPE;
  id_anterior T_TC_CADASTRO.id_cadastro%TYPE := NULL;
  id_proximo T_TC_CADASTRO.id_cadastro%TYPE;
BEGIN
  DBMS_OUTPUT.PUT_LINE(RPAD('Cod_emp', 20) || RPAD('Cod_dep', 20) || RPAD('Anterior', 20) || RPAD('Atual', 20) || RPAD('Próximo', 20));

  OPEN cursor_cadastro;
  FETCH cursor_cadastro INTO id_atual, nr_cnpj_atual;
  FETCH cursor_cadastro INTO id_proximo, nr_cnpj_proximo;

  LOOP
    EXIT WHEN cursor_cadastro%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(RPAD(NVL(TO_CHAR(id_anterior), 'Vazio'), 20) || RPAD(TO_CHAR(id_atual), 20) || 
    RPAD(NVL(TO_CHAR(nr_cnpj_anterior), 'Vazio'), 20) || RPAD(TO_CHAR(nr_cnpj_atual), 20) || 
    RPAD(NVL(TO_CHAR(nr_cnpj_proximo), 'Vazio'), 20));
    
    id_anterior := id_atual;
    nr_cnpj_anterior := nr_cnpj_atual;
    id_atual := id_proximo;
    nr_cnpj_atual := nr_cnpj_proximo;
    FETCH cursor_cadastro INTO id_proximo, nr_cnpj_proximo;
  END LOOP;

  CLOSE cursor_cadastro;

EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Nenhum dado encontrado.');
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Muitos dados encontrados.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
END;

-- EXEC PROC
EXEC proc_anterior_atual_proximo;
---

-----------------------------FUNÇÕES--------------------------------

--Função JSON 

--- FEITO ACIMA, NA SESSÃO DE PROCEDURES, COMO SOLICITADO:
--- Uma função deve ler os dados recebidos e transformá-lo para o 
--- formato JSON. Não use as funções built-in internas de transformação de e para 
--- JSON do banco de dados Oracle. Essa função será usada no primeiro 
--- procedimento solicitado em 1)

---
set serveroutput on
set verify off

--- Função com maior complexidade de senha, ja usada anteriormente "verificar_tamanho_senha"
CREATE OR REPLACE FUNCTION verifica_complexidade_senha(senha IN VARCHAR2) RETURN BOOLEAN IS
BEGIN
  IF LENGTH(senha) < 8 OR LENGTH(senha) > 60 THEN
    RETURN FALSE;
  END IF;

  IF NOT REGEXP_LIKE(senha, '[A-Z]') THEN
    RETURN FALSE;
  END IF;

  IF NOT REGEXP_LIKE(senha, '[a-z]') THEN
    RETURN FALSE;
  END IF;

  IF NOT REGEXP_LIKE(senha, '[0-9]') THEN
    RETURN FALSE;
  END IF;

  RETURN TRUE;

EXCEPTION
  WHEN VALUE_ERROR THEN
    DBMS_OUTPUT.PUT_LINE('Erro de valor: Verifique o comprimento da senha.');
    RETURN FALSE;
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Nenhum dado encontrado.');
    RETURN FALSE;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro: ' || SQLERRM);
    RETURN FALSE;
END;

--- Teste da função

DECLARE
  resultado BOOLEAN;
BEGIN
  resultado := verifica_complexidade_senha('Senha123');
  
  IF resultado THEN
    DBMS_OUTPUT.PUT_LINE('Senha válida');
  ELSE
    DBMS_OUTPUT.PUT_LINE('Senha inválida');
  END IF;
END;
---
DECLARE
  resultado BOOLEAN;
BEGIN
  resultado := verifica_complexidade_senha('A');
  
  IF resultado THEN
    DBMS_OUTPUT.PUT_LINE('Senha válida');
  ELSE
    DBMS_OUTPUT.PUT_LINE('Senha inválida');
  END IF;
END;
---

-----------------------------TRIGGERS--------------------------------

--- Nova Table de Auditoria
DROP SEQUENCE SEQ_AUDITORIA_CONSULTA;
DROP TABLE T_TC_AUDITORIA_CONSULTA;

CREATE TABLE T_TC_AUDITORIA_CONSULTA (
    id_auditoria NUMERIC PRIMARY KEY,
    id_consulta_old NUMERIC,
    ds_consulta_old VARCHAR(80),
    dt_consulta_old DATE,
    blob_csv_arquivo_old BLOB,
    id_cadastro_old NUMERIC,
    id_consulta_new NUMERIC,
    ds_consulta_new VARCHAR(80),
    dt_consulta_new DATE,
    blob_csv_arquivo_new BLOB,
    id_cadastro_new NUMERIC,
    usuario VARCHAR(30),
    operacao VARCHAR(10),
    data_operacao TIMESTAMP
);

CREATE SEQUENCE SEQ_AUDITORIA_CONSULTA
  START WITH 1
  INCREMENT BY 1
  MINVALUE 0
  MAXVALUE 1000
  NOCYCLE;

---

--- Trigger da Table de auditoria

CREATE OR REPLACE TRIGGER TRG_AUDITORIA_CONSULTA
AFTER INSERT OR UPDATE OR DELETE ON T_TC_CONSULTA
FOR EACH ROW
DECLARE
    v_usuario VARCHAR2(30);
BEGIN
    SELECT USER INTO v_usuario FROM dual;

    IF INSERTING THEN
        INSERT INTO T_TC_AUDITORIA_CONSULTA (
            id_auditoria, id_consulta_new, ds_consulta_new, dt_consulta_new, blob_csv_arquivo_new, id_cadastro_new,
            usuario, operacao, data_operacao
        ) VALUES (
            SEQ_AUDITORIA_CONSULTA.NEXTVAL, :NEW.id_consulta, :NEW.ds_consulta, :NEW.dt_consulta, :NEW.blob_csv_arquivo, :NEW.id_cadastro,
            v_usuario, 'INSERT', SYSTIMESTAMP
        );
    ELSIF UPDATING THEN
        INSERT INTO T_TC_AUDITORIA_CONSULTA (
            id_auditoria, id_consulta_old, ds_consulta_old, dt_consulta_old, blob_csv_arquivo_old, id_cadastro_old,
            id_consulta_new, ds_consulta_new, dt_consulta_new, blob_csv_arquivo_new, id_cadastro_new,
            usuario, operacao, data_operacao
        ) VALUES (
            SEQ_AUDITORIA_CONSULTA.NEXTVAL, :OLD.id_consulta, :OLD.ds_consulta, :OLD.dt_consulta, :OLD.blob_csv_arquivo, :OLD.id_cadastro,
            :NEW.id_consulta, :NEW.ds_consulta, :NEW.dt_consulta, :NEW.blob_csv_arquivo, :NEW.id_cadastro,
            v_usuario, 'UPDATE', SYSTIMESTAMP
        );
    ELSIF DELETING THEN
        INSERT INTO T_TC_AUDITORIA_CONSULTA (
            id_auditoria, id_consulta_old, ds_consulta_old, dt_consulta_old, blob_csv_arquivo_old, id_cadastro_old,
            usuario, operacao, data_operacao
        ) VALUES (
            SEQ_AUDITORIA_CONSULTA.NEXTVAL, :OLD.id_consulta, :OLD.ds_consulta, :OLD.dt_consulta, :OLD.blob_csv_arquivo, :OLD.id_cadastro,
            v_usuario, 'DELETE', SYSTIMESTAMP
        );
    END IF;
END;

---

--- Teste do Trigger

---
INSERT INTO T_TC_CONSULTA (id_consulta, ds_consulta, dt_consulta, blob_csv_arquivo, id_cadastro) VALUES (SEQ_CONSULTA.NEXTVAL, 'Consulta_1', SYSDATE, HEXTORAW('48656C6C6F'), 1);
---

---
SELECT * FROM T_TC_AUDITORIA_CONSULTA;
---

---
UPDATE T_TC_CONSULTA SET ds_consulta = 'Consulta_2', dt_consulta = SYSDATE, blob_csv_arquivo = HEXTORAW('48656C6C6F'), id_cadastro = 2 WHERE id_consulta = 1;
---

---
SELECT * FROM T_TC_AUDITORIA_CONSULTA;
---

SELECT * FROM T_TC_CONSULTA;
---
DELETE FROM T_TC_ANALISE_DA_CONSULTA WHERE id_consulta = 1;
DELETE FROM T_TC_REPRESENTANTE WHERE id_consulta = 1;
DELETE FROM T_TC_CONSULTA WHERE id_consulta = 1;
---
---
SELECT * FROM T_TC_AUDITORIA_CONSULTA;
---



--- TESTE DE EXCEPTION ---
DELETE FROM T_TC_ANALISE_DA_CONSULTA;
DELETE FROM T_TC_REPRESENTANTE;
DELETE FROM T_TC_CONSULTA;

DELETE FROM T_TC_EMAIL_CONTATO;
DELETE FROM T_TC_ENDERECO_EMPRESA;
DELETE FROM T_TC_LOGIN;
DELETE FROM T_TC_TELEFONE_EMPRESA;

DELETE FROM T_TC_CADASTRO;

set serveroutput on
set verify off

--- EXCEPTION PROC JSON
EXEC proc_join_para_json;
---



